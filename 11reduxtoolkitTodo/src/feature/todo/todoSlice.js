import { createSlice, nanoid } from "@reduxjs/toolkit";

// * First step : Create a initialState

const initialState = {
  todos: [{ id: 1, text: "Hello world !" }],
};

// * Second step : Define the slice includes (name, initialState, reducers)

const todoSlice = createSlice({
  name: "todo",
  initialState, // we can declare the initial state directly by using {todos : [{ id: 1, text: "Hello world}]}
  // reducers contain the property and function.
  // Here state is property which provide current state and actions are functions its provide current data which are provide which are accessible

  reducers: {
    //^ This reducer handles adding a new todo to the list.
    //^ `state` provides access to the current state of the array (e.g., the existing list of todos).
    //^ `action` carries information about what change needs to be made.
    //^ `action.payload` contains the text of the new todo item to be added.

    addTodo: (state, action) => {
      const todo = {
        // Generate a unique ID for the new todo using nanoid().
        id: nanoid(),
        // Set the text of the todo using the payload from the action.
        text: action.payload,
      };
      // Push the new todo object into the todos array within the state.
      state.todos.push(todo);
    },

    //& This reducer handles removing a todo item from the list.
    //& `state` provides access to the current state of the todos array.
    //& `action.payload` is expected to contain the ID of the todo item to be removed.

    removeTodo: (state, action) => {
      // Filter the todos array, keeping only the items whose IDs do not match the provided ID.
      // This effectively removes the todo item with the specified ID.
      state.todos = state.todos.filter((todo) => todo.id !== action.payload);
    },

    // ~ This reducer handles updating the text of a specific todo item.
    // ~ Finding the selected todo using the provided ID from action.payload.

    updateTodo: (state, action) => {
      const updatedTodo = state.todos.find(
        (todo) => todo.id === action.payload.id
      );
      // If a matching todo is found, update its text with the new value from action.payload.text.
      // Ensure to handle cases where no matching todo is found to avoid runtime errors.
      if (updatedTodo) {
        updatedTodo.text = action.payload.text;
      }
    },
  },
});

// * Third Step: Export

// * Exporting the action creators generated by `createSlice`.
// * These can be used to dispatch actions for `addTodo`, `removeTodo`, and `updateTodo`.
export const { addTodo, removeTodo, updateTodo } = todoSlice.actions;

// * Exporting the reducer generated by `createSlice`.
// * This reducer will be used in the store configuration to handle state updates for the todo slice.
export default todoSlice.reducer;
